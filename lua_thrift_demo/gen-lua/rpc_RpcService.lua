--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'rpc_ttypes'

RpcServiceClient = __TObject.new(__TClient, {
  __type = 'RpcServiceClient'
})

function RpcServiceClient:funCall(callTime, funCode, paramMap)
  self:send_funCall(callTime, funCode, paramMap)
  return self:recv_funCall(callTime, funCode, paramMap)
end

function RpcServiceClient:send_funCall(callTime, funCode, paramMap)
  self.oprot:writeMessageBegin('funCall', TMessageType.CALL, self._seqid)
  local args = funCall_args:new{}
  args.callTime = callTime
  args.funCode = funCode
  args.paramMap = paramMap
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function RpcServiceClient:recv_funCall(callTime, funCode, paramMap)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = funCall_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end
RpcServiceIface = __TObject:new{
  __type = 'RpcServiceIface'
}


RpcServiceProcessor = __TObject.new(__TProcessor
, {
 __type = 'RpcServiceProcessor'
})

function RpcServiceProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function RpcServiceProcessor:process_funCall(seqid, iprot, oprot, server_ctx)
  local args = funCall_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = funCall_result:new{}
  local status, res = pcall(self.handler.funCall, self.handler, args.callTime, args.funCode, args.paramMap)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('funCall', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

funCall_args = __TObject:new{
  callTime,
  funCode,
  paramMap
}

function funCall_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.callTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.funCode = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.paramMap = {}
        local _ktype1, _vtype2, _size0 = iprot:readMapBegin() 
        for _i=1,_size0 do
          _key4 = iprot:readString()
          _val5 = iprot:readString()
          self.paramMap[_key4] = _val5
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function funCall_args:write(oprot)
  oprot:writeStructBegin('funCall_args')
  if self.callTime then
    oprot:writeFieldBegin('callTime', TType.I64, 1)
    oprot:writeI64(self.callTime)
    oprot:writeFieldEnd()
  end
  if self.funCode then
    oprot:writeFieldBegin('funCode', TType.STRING, 2)
    oprot:writeString(self.funCode)
    oprot:writeFieldEnd()
  end
  if self.paramMap then
    oprot:writeFieldBegin('paramMap', TType.MAP, 3)
    local paramlen = 0
    for k,v in pairs(self.paramMap) do paramlen = paramlen + 1 end
    oprot:writeMapBegin(TType.STRING, TType.STRING, paramlen)
    for kiter6,viter7 in pairs(self.paramMap) do
      oprot:writeString(kiter6)
      oprot:writeString(viter7)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

funCall_result = __TObject:new{
  success
}

function funCall_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype11, _size8 = iprot:readListBegin()
        for _i=1,_size8 do
          _elem12 = iprot:readString()
          table.insert(self.success, _elem12)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function funCall_result:write(oprot)
  oprot:writeStructBegin('funCall_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, string.len(self.success))
    for _,iter13 in ipairs(self.success) do
      oprot:writeString(iter13)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end
